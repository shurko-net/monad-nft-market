// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonadNftMarket.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MonadNftMarket.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MonadNftMarket.Models.IndexerState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LastProcessedBlock")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Indexer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastProcessedBlock = "0",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MonadNftMarket.Models.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BuyerAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSold")
                        .HasColumnType("boolean");

                    b.Property<string>("ListingId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NftContractAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("SellerAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListingId")
                        .IsUnique();

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("MonadNftMarket.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("TransactionHash")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MonadNftMarket.Models.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("TradeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TradeId")
                        .IsUnique();

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("MonadNftMarket.Models.Listing", b =>
                {
                    b.OwnsOne("MonadNftMarket.Models.EventMetadata", "EventMetadata", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("uuid");

                            b1.Property<string>("BlockHash")
                                .IsRequired()
                                .HasMaxLength(70)
                                .HasColumnType("character varying(70)");

                            b1.Property<string>("BlockNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("TransactionHash")
                                .IsRequired()
                                .HasMaxLength(70)
                                .HasColumnType("character varying(70)");

                            b1.HasKey("ListingId");

                            b1.ToTable("Listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId");
                        });

                    b.Navigation("EventMetadata")
                        .IsRequired();
                });

            modelBuilder.Entity("MonadNftMarket.Models.Trade", b =>
                {
                    b.OwnsOne("MonadNftMarket.Models.EventMetadata", "EventMetadata", b1 =>
                        {
                            b1.Property<Guid>("TradeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("BlockHash")
                                .IsRequired()
                                .HasMaxLength(70)
                                .HasColumnType("character varying(70)");

                            b1.Property<string>("BlockNumber")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("TransactionHash")
                                .IsRequired()
                                .HasMaxLength(70)
                                .HasColumnType("character varying(70)");

                            b1.HasKey("TradeId");

                            b1.ToTable("Trades");

                            b1.WithOwner()
                                .HasForeignKey("TradeId");
                        });

                    b.OwnsOne("MonadNftMarket.Models.Peer", "From", b1 =>
                        {
                            b1.Property<Guid>("TradeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.PrimitiveCollection<List<string>>("NftContracts")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<string>("TokenIds")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TradeId");

                            b1.ToTable("Trades");

                            b1.WithOwner()
                                .HasForeignKey("TradeId");
                        });

                    b.OwnsOne("MonadNftMarket.Models.Peer", "To", b1 =>
                        {
                            b1.Property<Guid>("TradeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.PrimitiveCollection<List<string>>("NftContracts")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<string>("TokenIds")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("TradeId");

                            b1.ToTable("Trades");

                            b1.WithOwner()
                                .HasForeignKey("TradeId");
                        });

                    b.Navigation("EventMetadata")
                        .IsRequired();

                    b.Navigation("From")
                        .IsRequired();

                    b.Navigation("To")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
