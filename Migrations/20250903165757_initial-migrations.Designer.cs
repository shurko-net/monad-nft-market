// <auto-generated />
using System;
using System.Collections.Generic;
using System.Numerics;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonadNftMarket.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MonadNftMarket.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20250903165757_initial-migrations")]
    partial class initialmigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MonadNftMarket.Models.History", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("from_address");

                    b.Property<string>("ListingId")
                        .HasColumnType("text")
                        .HasColumnName("listing_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("to_address");

                    b.Property<string>("TradeId")
                        .HasColumnType("text")
                        .HasColumnName("trade_id");

                    b.HasKey("Id")
                        .HasName("pk_history");

                    b.HasIndex("ListingId")
                        .HasDatabaseName("ix_history_listing_id");

                    b.HasIndex("TradeId")
                        .HasDatabaseName("ix_history_trade_id");

                    b.HasIndex("FromAddress", "Status")
                        .HasDatabaseName("ix_history_from_address_status");

                    b.HasIndex("FromAddress", "ToAddress", "Status")
                        .HasDatabaseName("ix_history_from_address_to_address_status");

                    b.ToTable("history", (string)null);
                });

            modelBuilder.Entity("MonadNftMarket.Models.IndexerState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("LastProcessedBlock")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_processed_block");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_indexer");

                    b.ToTable("indexer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastProcessedBlock = "0",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MonadNftMarket.Models.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BuyerAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("buyer_address");

                    b.Property<string>("ListingId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("listing_id");

                    b.Property<string>("NftContractAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nft_contract_address");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("SellerAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("seller_address");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token_id");

                    b.Property<Guid?>("TradeId")
                        .HasColumnType("uuid")
                        .HasColumnName("trade_id");

                    b.HasKey("Id")
                        .HasName("pk_listings");

                    b.HasAlternateKey("ListingId")
                        .HasName("ak_listings_listing_id");

                    b.HasIndex("ListingId")
                        .IsUnique()
                        .HasDatabaseName("ix_listings_listing_id");

                    b.HasIndex("TradeId")
                        .HasDatabaseName("ix_listings_trade_id");

                    b.HasIndex("Status", "ListingId")
                        .HasDatabaseName("ix_listings_status_listing_id");

                    b.ToTable("listings", (string)null);
                });

            modelBuilder.Entity("MonadNftMarket.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("body");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("user_address");

                    b.HasKey("Id")
                        .HasName("pk_notifications");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("MonadNftMarket.Models.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ListingIds")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("listing_ids");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TradeId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("trade_id");

                    b.HasKey("Id")
                        .HasName("pk_trades");

                    b.HasAlternateKey("TradeId")
                        .HasName("ak_trades_trade_id");

                    b.HasIndex("TradeId")
                        .IsUnique()
                        .HasDatabaseName("ix_trades_trade_id");

                    b.HasIndex("Status", "TradeId")
                        .HasDatabaseName("ix_trades_status_trade_id");

                    b.ToTable("trades", (string)null);
                });

            modelBuilder.Entity("MonadNftMarket.Models.History", b =>
                {
                    b.HasOne("MonadNftMarket.Models.Listing", "Listing")
                        .WithMany()
                        .HasForeignKey("ListingId")
                        .HasPrincipalKey("ListingId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_history_listings_listing_id");

                    b.HasOne("MonadNftMarket.Models.Trade", "Trade")
                        .WithMany()
                        .HasForeignKey("TradeId")
                        .HasPrincipalKey("TradeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_history_trades_trade_id");

                    b.OwnsOne("MonadNftMarket.Models.EventMetadata", "EventMetadata", b1 =>
                        {
                            b1.Property<Guid>("HistoryId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("BlockHash")
                                .IsRequired()
                                .HasMaxLength(70)
                                .HasColumnType("character varying(70)")
                                .HasColumnName("event_metadata_block_hash");

                            b1.Property<string>("BlockNumber")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("event_metadata_block_number");

                            b1.Property<DateTime>("Timestamp")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("event_metadata_timestamp");

                            b1.Property<string>("TransactionHash")
                                .IsRequired()
                                .HasMaxLength(70)
                                .HasColumnType("character varying(70)")
                                .HasColumnName("event_metadata_transaction_hash");

                            b1.HasKey("HistoryId");

                            b1.ToTable("history");

                            b1.WithOwner()
                                .HasForeignKey("HistoryId")
                                .HasConstraintName("fk_history_history_id");
                        });

                    b.Navigation("EventMetadata")
                        .IsRequired();

                    b.Navigation("Listing");

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("MonadNftMarket.Models.Listing", b =>
                {
                    b.HasOne("MonadNftMarket.Models.Trade", null)
                        .WithMany("Listings")
                        .HasForeignKey("TradeId")
                        .HasConstraintName("fk_listings_trades_trade_id");

                    b.OwnsOne("MonadNftMarket.Models.NftMetadata", "NftMetadata", b1 =>
                        {
                            b1.Property<Guid>("ListingId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("nft_metadata_description");

                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("nft_metadata_id");

                            b1.Property<string>("ImageOriginal")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("nft_metadata_image_original");

                            b1.Property<string>("Kind")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("nft_metadata_kind");

                            b1.Property<DateTime>("LastUpdated")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("nft_metadata_last_updated");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("nft_metadata_name");

                            b1.Property<string>("NftContractAddress")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("nft_metadata_nft_contract_address");

                            b1.Property<decimal?>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("nft_metadata_price");

                            b1.Property<BigInteger>("TokenId")
                                .HasColumnType("numeric")
                                .HasColumnName("nft_metadata_token_id");

                            b1.HasKey("ListingId");

                            b1.ToTable("listings");

                            b1.WithOwner()
                                .HasForeignKey("ListingId")
                                .HasConstraintName("fk_listings_listings_id");
                        });

                    b.Navigation("NftMetadata")
                        .IsRequired();
                });

            modelBuilder.Entity("MonadNftMarket.Models.Trade", b =>
                {
                    b.OwnsOne("MonadNftMarket.Models.Peer", "From", b1 =>
                        {
                            b1.Property<Guid>("TradeId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("from_address");

                            b1.PrimitiveCollection<List<string>>("NftContracts")
                                .IsRequired()
                                .HasColumnType("text[]")
                                .HasColumnName("from_nft_contracts");

                            b1.Property<string>("TokenIds")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("from_token_ids");

                            b1.HasKey("TradeId");

                            b1.ToTable("trades");

                            b1.WithOwner()
                                .HasForeignKey("TradeId")
                                .HasConstraintName("fk_trades_trades_id");
                        });

                    b.OwnsOne("MonadNftMarket.Models.Peer", "To", b1 =>
                        {
                            b1.Property<Guid>("TradeId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("to_address");

                            b1.PrimitiveCollection<List<string>>("NftContracts")
                                .IsRequired()
                                .HasColumnType("text[]")
                                .HasColumnName("to_nft_contracts");

                            b1.Property<string>("TokenIds")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("to_token_ids");

                            b1.HasKey("TradeId");

                            b1.ToTable("trades");

                            b1.WithOwner()
                                .HasForeignKey("TradeId")
                                .HasConstraintName("fk_trades_trades_id");
                        });

                    b.Navigation("From")
                        .IsRequired();

                    b.Navigation("To")
                        .IsRequired();
                });

            modelBuilder.Entity("MonadNftMarket.Models.Trade", b =>
                {
                    b.Navigation("Listings");
                });
#pragma warning restore 612, 618
        }
    }
}
